package planning_lab.PlanExecutorAgent;

import jade.core.Agent;
import jade.core.behaviours.*;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.ServiceDescription;

import java.util.*;
import java.io.File;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;

import planning_lab.CSVtable;
import planning_lab.DataHandler;

/** 
 * An agent for executing plans generated by the LPG-td-1.0 planner
 * 
 * @author Dániel László, Kovács (dkovacs@mit.bme.hu)
 */
public class PlanExecutorAgent extends Agent {

	
	private static final long serialVersionUID = -5464378881159323050L;
	/** The file path of the product data CSV file */
	public static final String DATA = "sajat_csv/data.csv";
	/** The file path of the shop-dictionary CSV file */
	public static final String SHOPDICT = "sajat_csv/shopdict.csv";
	/** The file path of the product-dictionary CSV file */
	public static final String PRODDICT = "sajat_csv/proddict.csv";
	
	/** The filePath of the text file holding the plan*/
	private String planFilePath;
	/** A completely ordered plan: a Vector of action-vectors (vectors of form: action-name, param1, ..., paramN)*/ 
	Vector<Vector<String>> actions;
	/** The product data*/
	private CSVtable data;
	/** The shop-dictionary*/
	private CSVtable shopdict;
	/** The product-dictionary*/
	private CSVtable proddict;
    
	/** 
	 *  Initialize the agent
	 */
  	protected void setup() {
  	
  		// Register the book-selling service in the yellow pages
	    DFAgentDescription dfd = new DFAgentDescription();
	    dfd.setName(getAID());
	    ServiceDescription sd = new ServiceDescription();
	    sd.setType("plan-executor");
	    sd.setName("plan-execution");
	    dfd.addServices(sd);
	    
	    try {
	    	
	      DFService.register(this, dfd);
	      
	    } catch (FIPAException fe) {
	    	
	      fe.printStackTrace();
	      
	    }

	  // Get the catalogue database's filePath as a start-up argument
	  Object[] args = getArguments();
	  
	  if (args != null && args.length > 0) {
	  	
		  planFilePath = (String)args[0];
		  File planFile = new File(planFilePath);
	    
		  if (planFile.isFile()) {
	    
			  System.out.println(getLocalName() + ": planfile to be executed is " + planFilePath);

			  // Add a behaviour for executing the plan given in the 1st input argument
			  addBehaviour(new ExecutePlan());
	    
		  } else {
	  		  System.out.println(planFile);
			  // Make the agent terminate
			  System.out.println("The planfile specified is non existing...");
			  doDelete();	  		
	  		
		  }
	    
	  } else {
	  	
	    // Make the agent terminate
	    System.out.println("No planfile specified...");
	    doDelete();
	    
	  }
    
  } // End of PlanExecutorAgent.setup method

  /**
   * Clean-up after the agent
   */
  protected void takeDown() {
  	
    // De-register from the "yellow pages"
    try {
    	
      DFService.deregister(this);
      
    } catch (FIPAException fe) {
    	
      fe.printStackTrace();
      
    }
    
    // Printout a dismissal message
    System.out.println("\nPlanExecutor agent " + getAID().getName() + " terminating...");
    
  } // End of PlanExecutorAgent.takeDown method

	/**
	 * Parse an action-plan from a string containing the text from a plan-file
	 * generated by the LPG-td-1.0 planner.
	 * 
	 * @param planString a plan-file (generated by the LPG-td-1.0 planner) in the form of a string
	 *
	 */
  public void parsePlanString(String planString) {

	  int		i = 0;
	  boolean	as = false;
	  boolean	a = false;
	  String	token;

	  actions				= new Vector<Vector<String>>();
	  Vector<String> action	= new Vector<String>();
	  
	  StringTokenizer st = new StringTokenizer(planString, " ");

	  while (st.hasMoreTokens()) {
		  
		  token = st.nextToken();
		  
		  if (!as && token.equalsIgnoreCase("Time")) {

			  as = true;
			  
		  } else if (as && !a && token.startsWith("(")) {	// The name of an action
			  
			  a	= true;
			  action.add(token.substring(1, token.length()));
			  
		  } else if (as && a && token.endsWith(")")) {		// The name of the last parameter of an action
			  
			  action.add(token.substring(0, token.length()-1));
			  actions.add(action);
			  action = new Vector<String>();
			  i	= 0;
			  a	= false;

		  } else if (as && a && !token.isEmpty()) {			// The name of a parameter of an action
			  
			  i++;
			  action.add(token.substring(0, token.length()));
			  
		  }
		  
	  } // End of while(tokens)
	  
  } // End of PlanExecutorAgent.parsePlanString method

	/**
	 * Convert a PDDL action into an appropriate physical action (in our case an appropriate URL)...
	 *
	 * @param action the PDDL action (the first element is the name of the action followed by its parameter-values)
	 * 
	 * @return the "physical" interpretation of the PDDL action (now a URL string)
	 */
public String interpretAction(Vector<String> action) {

	int outputidx;
	String url = "";
	
	try {

		// -------------------
		// ACTION == CHECK_OUT
		// -------------------
		if (action.elementAt(0).equalsIgnoreCase("check_out")) {		// <--- ITT KELL ATIRNI!!! Mi a csel. neve?
		
			// Lets translate the shop PDDL object from where we must check out
			int[] inputidx	= {0};
			String[] input	= {action.elementAt(1)};					// <--- ITT KELL ATIRNI!!! elementAt(???)
			outputidx		= 1;
			
			String csvShop	= shopdict.translate(inputidx, input, outputidx);
			
			if (csvShop.equals("blue")) {
				
		        url = "http://project.mit.bme.hu/vimim223/sites/07/webshops/shop1/?checkout=1";
		        
			} else if (csvShop.equals("green")) {
				
		        url = "http://project.mit.bme.hu/vimim223/sites/07/webshops/shop2/?checkout=1";
				
			} else if (csvShop.equals("red")) {
				
		        url = "http://project.mit.bme.hu/vimim223/sites/07/webshops/shop3/?checkout=1";
				
			}
	
		// -----------------
		// ACTION == TO_CART
		// -----------------
		} else if (action.elementAt(0).equalsIgnoreCase("add_to_cart")) {	// <--- ITT KELL ATIRNI!!! Mi a csel. neve?
	
			// 01: lets translate the shop PDDL object
			int[] inputidx1	= {0};
			String[] input1	= {action.elementAt(3)};					// <--- ITT KELL ATIRNI!!! elementAt(???)
			outputidx		= 1;	
			
			String csvShop	= shopdict.translate(inputidx1, input1, outputidx);
			
			if (!csvShop.isEmpty()) {
			
				// 02: if the shop could be translated, lets translate a given PDDL object (item) in that shop
				int[] inputidx2	= {0, 1};
				String[] input2	= {action.elementAt(1), csvShop};		// <--- ITT KELL ATIRNI!!! elementAt(???)
				outputidx		= 2;
				
				String csvProd	= proddict.translate(inputidx2, input2, outputidx);
				
				if (!csvProd.isEmpty()) {
				
					// 03: if the product in the shop could be interpreted, lets find the URL to put it into the cart!
					int[] inputidx3	= {0, 2};
					String[] input3	= {csvShop, csvProd};
					outputidx		= 8;
					
					url = data.translate(inputidx3, input3, outputidx);
					
				}
				
			}
			
		} // <--- IDE KELL MEG TOVABBI ELSE-IF AGAKAT ILLESZTENI, HA A FENTI KET PDDL-CSELEKVESEN TUL MAS IS VAN MEG!!
	
	} catch (Exception e) {
		
		e.printStackTrace();
		
	}

	return url;
	
} // End of PlanExecutorAgent.interpretAction method

/**
 * Simply open a URL address (which is the "physical" interpretation of an "abstract" PDDL action)
 * 
 * @param url a well-formed URL string
 */
public void executeInterpretation(String url) throws Exception {

	if (!url.isEmpty()) {
	
	    try {
	    	
	        BufferedReader in = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
	        /*String inputLine;
	        System.out.println("---- RESPONSE START ----");										// Print
	        while ((inputLine = in.readLine()) != null) System.out.println(inputLine);			// the
	        System.out.println("----- RESPONSE END -----");*/									// response
	        in.close();
	        
	    } catch (IOException e) {
	    
	    	e.printStackTrace();
	
	    }
	    
	}
	
} // End of PlanExecutorAgent.executeInterpretation method
  
	/**
	 * Execute a PDDL plan (generated by the LPG-td-1.0 planner application)
	 * 
	 * @author Dániel László, Kovács (dkovacs@mit.bme.hu)
	 *
	 */
	private class ExecutePlan extends OneShotBehaviour {
		
		private static final long serialVersionUID = -3897727060857984811L;

		public void action() {
		  	
			  try {
				  
				  // Read and parse a plan from a planfile into the PlanExecutorAgent.actions object...
				  parsePlanString(DataHandler.readFile2String(planFilePath));
	
				  // Parse the necessary CSV files to be able to do the interpretation of the action plan...
				  data		= new CSVtable(DATA);
				  shopdict	= new CSVtable(SHOPDICT);
				  proddict	= new CSVtable(PRODDICT);
	  
				  Vector<String> modelAction;
				  Iterator<Vector<String>> actionsi = actions.iterator();
				  
				  // Interpret and execute actions in the plan (one by one)...
				  while (actionsi.hasNext()) {
					  
					  modelAction		= actionsi.next();
					  String realAction	= interpretAction(modelAction);

					  // -------------- FEEDBACK TO THE USER CONSOLE ------------------
					  Iterator<String> actioni	= modelAction.iterator();
					  String modelActionString	= "";
					  while (actioni.hasNext()) modelActionString += actioni.next() + " ";
					  System.out.println("\nMODEL ACTION:\t" + modelActionString);
					  System.out.println(" REAL ACTION:\t"   + realAction);
					  // --------------------------------------------------------------
					  
					  executeInterpretation(realAction);

				  }
			  
				  // Send the agent into another dimension
				  doDelete();
				  
			  } catch (Exception e) {
				  
				  e.printStackTrace();
				  
			  }
			  
		  } // End of PlanExecutorAgent.ExecutePlan.action method
	  
	}  // End of PlanExecutorAgent.ExecutePlan inner class
		
} // End of PlanExecutorAgent class