(define (domain webshop)
	(:requirements :strips :typing :fluent)
	(:types product type shop)
	(:predicates	(compat ?p1 - product ?p2 - product)
						(shopped_from ?s - shop)
						(in_cart ?p - product)
						(in_cart_type ?t - type)
						(prod ?p - product ?t - type ?s - shop)
						(compat_in_cart ?t1 - type ?t2 - type)
						(checked_out ?s)
	)
						
	(:functions
		(reliability ?p - product)
		(price ?p - product)
		(total_reliability)
		(total_cost)
		(remaining_cash)
	)

		
	(:action add_to_cart
		:parameters	(?p - product ?t - type ?s - shop)
		:precondition	(and 	(prod ?p ?t ?s)
									(not ( in_cart_type ?t))
									(>= (remaining_cash) (price ?p))
									(not (checked_out ?s))
							)
		:effect			(and  (in_cart ?p)
									(in_cart_type ?t)
									(increase ( total_cost ) ( price ?p))
									(decrease ( remaining_cash ) ( price ?p))
									(increase (total_reliability) (reliability ?p))
									(shopped_from ?s)
							)
	)

	(:action check_compatibility
	   :parameters	(?p1 ?p2 - product ?t1 ?t2 - type ?s1 ?s2 - shop)
	   :precondition	(and 	(prod ?p1 ?t1 ?s1)
								(prod ?p2 ?t2 ?s2)
								(in_cart ?p1)
								(in_cart ?p2)
								( or	(compat ?p1 ?p2)
										(compat ?p2 ?p1))
						)
	  :effect		(and 	(compat_in_cart ?t1 ?t2)
							(compat_in_cart ?t2 ?t1)
					)
	)

	(:action check_out
		:parameters	(?s - shop)
		:precondition	(shopped_from ?s)
		:effect		( checked_out ?s)
	)
)